

四大组件：

Activity

启动模式 普通、栈顶复用、栈内复用、单例

onNewIntent（）
onSaveInstanceState（）

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

service 绑定服务、启动服务
计算型组件。绑定服务用于和其他组件交互。启动服务只是启动服务。



普通的service ,默认运行在主线程，若执行耗时操作，会产生ANR。此时要记得在子线程中执行耗时操作。执行完后要记得停止服务。

intentService内部会开启一个子线程，执行耗时操作，执行完毕后，会自动停止。
针对于startService来说，底层实现是HandlerThread。HandlerThread是一个带Looper的子线程，直接继承自Thread；一般线程没有Looper，要手动创建；主线程才有Looper，

要有无参构造调用父类的有参构造，且重写onHandleIntent方法，处理具体逻辑。

intentservice在子线程中执行耗时任务，并到时会自动停止。无参构造调用父类的有参构造。重写onHandlerIntent方法，处理具体的逻辑

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

contentprovider



~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

brocastReceiver
静态注册、动态注册
注册的是类，只有来广播后，才会创建对象，处理完后，对象就消亡了。
注册的是对象。只有应用启动后，才可注册。

标准广播、有序广播：优先级。
全局广播、局部广播：使用LocalBroadcastManager管理，只在应用内使用，不存在安全问题。



-----------------------

运行在主线程

Activity的所有生命周期回调都是执行在主线程的
service所有的生命周期方法都运行在主线程
广播接收器的onReceiver方法运行在主线程。不可执行耗时操作，也不可开启子线程。生命周期短，执行完后，就可能变成空进程，容易被系统回收，此时子线程也无法执行完。
没有使用子线程的looper的Handler的handleMessage是执行在主线程的.
AsyncTask的回调中除了doInBackground, 其他都是执行在主线程的.


Toast需要Activity类型的Context。静态广播中的context不是Activity类型的，无法形成任务栈。
aidl:除了被调用的远程方法运行在线程池中，其余所有的方法都运行在主线程中
客户端调用远程方法后，客户端会被挂起，故不要调用耗时的远程方法。

-----------------------

线程和进程

进程一般指可执行单元，每个进程具有自己的内存空间，不同进程之间的数据不可随意访问。

线程：cup调度的单位，一个进程内可有多个线程，若只有一个线程，则为主线程。
若线程过多，系统会通过时间片轮转的方式调度每个线程。
因为线程的创建和销毁都会产生一定的开销，故建议使用线程池，缓存一定的线程。

-----------------------

进程间通信 - Binder RPC（Remote Procedure Call）也即远程例程调用

四大组件中的三个 进程间通信，都是基于Bundle //Intent底层的数据是通过Bundler对象的形式存储的。

messenger：底层实现是aidl：使用于低并发的一对多串行通信。
aidl:高并发且远程调用服务端的方法时。
ContentProvider一对多

socket网络通信

缺点：
Application有多份
单例模式、静态变量
SharePreference：xml，没有实现并发修改的机制，不能保证数据的安全、准确性。
线程同步机制失效：进程不同，锁住的对象不是同一个
-----------------------	

serilaziabler  parceleable
s是Java的序列化接口。使用简单，但效率低，序列化和反序列化的时候都涉及大量的io操作。
p是Android的序列化方式。使用复杂，但效率高。
若是有大量数据，需要把对象序列化到设备 或者 序列化后通过网络传输，则建议使用s

-----------------------

单例模式 -- voliter：Java虚拟机有指令重排序优化。


双重if外加同步锁机制
安全 - 高效

-----------------------

Handler机制 --  线程间通信
子线程中，会调用Handler的sendmessage方法发送消息忘消息队列，Looper会调用loop方法从mq中获取获取msg,发给handler.
handlerMessage处理。处理完后，会把消息置空，放入消息池中。
其中mq是个优先级队列。

Looper.loop方法无限循环是为了保证程序不退出。若mq中无消息处理，则阻塞在mq的next方法，直至有消息加入mq，looper继续工作。
Anr是某个消息的处理时间过长，导致主线程被阻塞，二者不是一回事。

-----------------------

事件分发机制

事件有为down 多个move up组成，

事件会先从最外层进行进行分发dispatchTouchEvent，若没有任何view消费该事件，则最后由Activity消费该事件，即有onTouchEvent处理他。

若点击了某个视图，事件分发到该视图后，就由该视图消费。
该view连down事件都不处理，故move/up事件也不会分发到imageView，直接由Activity的onTouchEvent方法处理了。

回调监听(setOnTouchListener)的优先级大于回调方法(onTouchEvent)的优先级

-----------------------	


asynicTask<Param, Progress, Result>


onPreExecute()//当任务执行之前开始调用此方法，可以在这里显示进度对话框
Progress doInBackground(Param)//后台线程 执行  -- 子
publisProgress(Progress)		//-- 子
onProgressUpdate(Progress)//显示任务执行的进度
onPostExecute()//任务执行的结果  取消进度条


AsyncTask的底层实现也是Handler机制，AsyncTask内部会创建一个线程池，由线程池来管理创建Thread和运行Therad。

当调用了AsyncTask.execute()后，会先执行onPreExecute方法，用于显示进度条等UI操作，该方法运行在主线程中。

接着会创建Handler绑定主线程的Looper，则Handler的handlemessage方法会执行在主线程中。

然后调用doInBackGround方法，用于后台执行耗时任务，该方法运行在子线程中。

后台执行任务时，可以调用publishProgress方法，通过Handler把消息发送给主线程，调用onPorgressUpdate方法更新当前进度。

任务执行完后，把执行结果通过Handler发送到主线程中的onPostExecute方法中处理，并取消进度条。

//若要AsyncTask串行执行，要调用execute()方法；要并行执行，则调用executeOnExecutor方法

缺点

若AsyncTask被声明为Activity的静态内部类，则AsyncTask内部持有了该Activity的对象
若Activity被销毁时，AsyncTask还在后台执行，则Activity无法被回收，造成内存泄露

屏幕旋转或Activity在后台被杀死后，Activity会重新创建，则AsyncTask内部持有的Activity对象已经无效，此时调用onPostExecute()方法，将无法更新UI界面



------

2、内存泄漏

        如果AsyncTask被声明为Activity的非静态的内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露。

3、结果丢失

       屏幕旋转或Activity在后台被系统杀掉等情况会导致Activity的重新创建，之前运行的AsyncTask会持有一个之前Activity的引用，这个引用已经无效，这时调用onPostExecute()再去更新界面将不再生效。

4、并行还是串行

      在Android 1.6之前的版本，AsyncTask是串行的，在1.6至2.3的版本，改成了并行的。在2.3之后的版本又做了修改，可以支持并行和串行，当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。

AsyncTask对象必须在主线程中创建
AsyncTask对象的execute方法必须在主线程中调用
一个AsyncTask对象只能调用一次execute方法 -- 轻量级的异步类

线程池有限，太多内容同时异步会超时，甚至出现ANR效果。 

-----------------------	

动画

-----------------------	

view的绘制流程

-----------------------	


ListView如何提高其效率？

分页加载
利用getview的convertview参数，若该参数为空，则加载布局，并把加载好的布局缓存；若该参数不为空，则直接从缓存中取。
使用内部类，缓存布局中的控件//避免了每次在调用getView的时候都去通过findViewById实例化数据

-----------------------	



Java  



1.
==：    比较两个对象的地址是否相同，若双等号两端指向同一块内存，则相等。
	操作符两端必须是同一类型的变量才能编译通过，可以是父子类。
equals：比较两个对象的内容是否相等，若对象不重写equals方法，则调用object的equals方法的判断结果，返回==的判断结果


3.　String　StringBuffer StringBuilder 

运行速度快慢为：StringBuilder > StringBuffer > String

String为字符串常量，String对象一旦创建之后该对象是不可更改的，若要改变String对象内容，则会创建一个新的对象存放改变后的内容，旧对象会被回收，
经常改变内容的字符串最好不要用 String，因为对象的创建和回收都会产生一定的开销。
StringBuilder和StringBuffer均为字符串变量，更改字符串内容就是直接修改对象，不涉及到对象的创建和回收，速度比String快
但StringBuffer的方法是同步的，线程安全的。
StringBuilder不是线程安全的，运行速度比StringBuffer快，因为同步必然影响性能。若不需要考虑线程安全的情况下，建议使用StringBuilder

　　String：适用于少量的字符串操作的情况
　　StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况
　　StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况

4.
Java集合类框架//扩容->底层采用数组存储；同步必然影响性能

collection map
list set
1）list -- 关注索引，元素有序，允许有重复的元素
vector ArrayList linklist
vector的方法都是同步的，是线程安全的，ArrayList Linklist都不是线程安全的，线程同步必然影响性能，执行效率比vector高
vector和ArrayList的底层采用数组存储，更适合查询，Linklist的底层是双向链表，更适合增删。

vector和ArrayList的底层采用数组存储，当使用元素超过初始大小时，
vector会翻倍，而ArrayList只增加50%。若集合中涉及到大量的数据时，使用vector有优势
//linklist是链表，不存在扩容一说。

2） set -- 关注唯一性，元素无序，元素不重复
hashset

3）map -- 关注键值对
hashmap hashtable
hashmap
使用数组+链表+红黑树结构存储数据，为了便于查找。
每个元素都是一个键值对
当要插入一个数据时，会利用当前的键来计算出其hash值，由hash值和数组的长度来计算出对应的下标。
若对应的下标有元素存在了，则看两个元素的键是否相等，若相等则覆盖该元素，若不等则形成链表。若链表长度大于8，则形成红黑树。

不是线程安全的。

hashtab是线程安全的，因为有同步锁，则会有一定的性能损失，效率不如hashmap。
conCurrentHashMap也是线程安全的，根据同步级别对map的一部分进行上锁,性能比hashtab好，比hashmap安全。

扩容：当使用空间达到总空间的0.75时，就会扩容，申请一个新数组，是原来数组的2倍。
若在多线程下，两个线程同时扩容，存在条件竞争，会产生死循环。

重写equals方法的同时也要重写hashCode方法
put和get都首先会调用hashcode方法，去查找相关的key若不重写hashcode方法，则存入该元素时的hash值和取出该元素的hash值不同，就会出现返回null的情况。

5.final

修饰类：终态类，不可被继承
修饰方法：可被子类继承，不可别重写
修饰成员变量：必须在对象构建之前赋值，可在代码块、构造器、定义处赋值。
修饰变量：基本类型的变量，其值不可变；类类型变量，指向不可变，指向的内存上的值可变。

6 static 
修饰方法：静态方法，是属于类的，不属于对象。不能调用普通方法和普通变量，因为在类加载时，对象还未创建，而普通方法和普通变量依赖于对象
修饰变量：静态变量，作用域是整个类。局部变量不能使用static修饰，其作用域是该方法，和静态变量的作用域冲突。
修饰代码块：在类加载时，被初始化。

7. 面向对象的三大特征：继承封装多态
继承：Java是单继承，多实现
	子类可更好的复用父类的代码，除了私有成员、私有方法。同时子类也可由一定的扩展
	覆盖/重写：返回值类型、函数名、参数列表都相同
	重载：类内，方法名、参数列表同，和返回值类型无关。
封装：内部数据不被任意更改，只能通过类提供的方法来访问数据，保证了数据的安全性
	内部类可访问类的所有，包括私有数据。
多态：父类引用指向子类对象
	普通方法：编译看左边，运行看右边
	静态方法、普通方法、静态方法，编译、运行时都看左边。
	子类的普通成员不会覆盖父类的同名普通成员
1) 属性：编译运行时，都看左边。运行时，方法有重写、覆盖，但属性无覆盖。在使用多态时，子类的属性不会覆盖父类的同名属性，此时是调用的父类的属性值。
2) 方法：编译时看左边；运行时看右边。这也就是为什么对象p不能调用Student的study方法，因为在编译是，对象p是Person类型的。
3) 静态成员和静态方法：无论编译和运行，都看左边。若没有向下转型，则找父类的静态成员/方法；若转型过，优先找自己的静态成员/方法；

8. Java 内存泄漏//对象被销毁，而无法被回收，引起内存泄露
	
	当对象存入hashset集合后，就不能再修改对象中参与计算hash值的成员了，若对应的成员被修改，则hash值改变，在删除该对象时无法根据hash值找到该对象，会造成内存泄漏
	
	静态集合类：静态变量的生命周期和应用程序一样长。
	hashmap、vector等，把object对象加入集合对象，用完集合，要记得把对象从集合对象中移除，否则，集合对象会一直持有object对象，导致object对象也无法释放。

	单例模式：单例的实例持有了外部对象，导致外部对象无法释放，而造成了内存泄漏。

	监听器：注册监听器后，释放对象时，要删除监听器。

	数据连接： 在try中进行数据连接：网络连接、io连接、数据库连接等，在finally中断开连接
	
	//用到属性动画中的无线循环动画时，要在activity销毁时，调用animator.cancel()方法停止对象//Android

9. 引用计数算法：
	每个对象的内部都会维护一个计数器，当该对象被引用时，计数器加1，当引用失效时，计数器减1，当计数器为0时，就可能被系统回收。
	当a对象内部持有了b对象，b对象内部也持有a对象时，就形成了循环引用。
	
	引用计数算法中，每个计数器只是记录了对应对象的局部信息，而没有一份全局的对象图的生死信息。

   可达性算法：有全局的对象图信息，从对象图的根扫描，批量识别对象的生死状态，然后批量释放死亡对象。
mygithubcode0*#




